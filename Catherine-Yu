import java.util.Scanner;
// More packages may be imported in the space below
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;

class CustomerSystem {
    public static void main(String[] args) throws FileNotFoundException {
        // Please do not edit any of these variables
        Scanner reader = new Scanner(System.in);
        String userInput, enterCustomerOption, generateCustomerOption, exitCondition;
        enterCustomerOption = "1";
        generateCustomerOption = "2";
        exitCondition = "9";

        // More variables for the main may be declared in the space below
        //Declare an array with six elements to contain the customer's information
        String[] customerInfo = new String[6];
        //Declare and initialize count
        int count = 1;
        //Declare and initialize the name of the file with the customer's information
        String fileName = "customer_information.csv";
        //Create a file with the value of fileName as its name
        File file = new File(fileName);
        //Create a PrintWriter
        PrintWriter printWriter = new PrintWriter(fileName);

        do {
            printMenu();                                    // Printing out the main menu
            userInput = reader.nextLine();                  // User selection from the menu

            if (userInput.equals(enterCustomerOption)) {
                // Only the line below may be edited based on the parameter list and how you design the method return
                //Collect the customer's information
                customerInfo = enterCustomerInfo(count, customerInfo);
                //Add one to count to update the next customer's ID
                count++;
                //Validate the entered postal code and corresponding city
                validatePostalCode(customerInfo[4], customerInfo[3], customerInfo);

            } else if (userInput.equals(generateCustomerOption)) {
                // Only the line below may be edtted based on the parameter list and how you design the method return
                //Create a data file with the customer's information
                generateCustomerDataFile(customerInfo, printWriter);
                
            } else {
                System.out.println("Please type in a valid option (A number from 1-9)");
            }

        } while (!userInput.equals(exitCondition));         // Exits once the user types the exitCondition

        System.out.println("Program Terminated");

        //Close the PrintWriter and Scanner
        printWriter.close();
        reader.close();
    }

    /**
     * Print the user interface into the terminal panel
     */
    public static void printMenu() {
        //Print a line for aesthetic purposes
        System.out.println();
        System.out.println("Customer and Sales System\n"
        .concat("1. Enter Customer Information\n")
        .concat("2. Generate Customer data file\n")
        .concat("3. Report on total Sales (Not done in this part)\n")
        .concat("4. Check for fraud in sales data (Not done in this part)\n")
        .concat("9. Quit\n")
        .concat("Enter menu option (1-9)\n")
        );
    }
    /**
     * @param count     The customer's unique ID value
     * @param info      An empty array to contain the customer's information
     * @return          The populated array that contains the customer's information
     */
    public static String[] enterCustomerInfo(int count, String[] info) {
        //Create a new scanner
        Scanner sc = new Scanner(System.in);

        //Set the customer's ID as the value of count
        info[0] = "" + count;
        //User inputs
        System.out.println("Customer's first name:");
        info[1] = sc.nextLine();
        System.out.println("Customer's last name");
        info[2] = sc.nextLine();
        System.out.println("Customer's city with proper capitalization");
        info[3] = sc.nextLine();
        System.out.println("Customer's postal code with proper spacing");
        info[4] = sc.nextLine();
        System.out.println("Customer's credit card number");
        info[5] = sc.nextLine();
    
        sc.close();
	//Return the populated array
        return info;
    }
    /**
     * Compare the customer's entered postal code and city 
     * with a document of Canadian postal codes and cities to ensure they are valid
     * @param postalCode    The customer's entered postal code
     * @param city          The customer's entered city
     */
    public static void validatePostalCode(String postalCode, String city, String[] info) {
        //Declare scanners and file
        Scanner reader = new Scanner(System.in);
        Scanner sc = new Scanner(System.in);
        String fileName = "postal_codes.csv";
        File file = new File(fileName);
        //Declare and initialize variables
        int count = 0;
        String originalPostalCode = postalCode;

		do {
            //Validate the length of the postal code
            if (postalCode.length() < 3) {
                System.out.println("Please enter a valid postal code that has three or more characters");
                //User input for the new postal code
                postalCode = sc.nextLine();
            }
            //Validate the postal code and the corresponding city
            try {
                reader = new Scanner(file);
                //Create an array that splits the first three digits from the other digits
                String[] firstThree = postalCode.split(" ");
                
                //Go through every line in the file to validate
                while (reader.hasNextLine()) {
                    String line = reader.nextLine();
                    //If the line contains both the first three digits of the entered postal code and the city, separated by a |, the postal code is valid
                    if ( (line.contains(firstThree[0] + "|" + city)) ) {
                        System.out.println(postalCode + " is a valid postal code for " + city);
                        //Update the postal code
                        info[4] = postalCode;
                        //Add one to count for the do-while loop condition
                        count++;
                    }
                }
                //Execute if none of the lines contain the first three digits of the postal code and the city
                //Count does not get updated in this block as the postal code needs to be validated again
                if (count == 0) {
                    System.out.println("Please enter a valid postal code");
                    postalCode = sc.nextLine();
                    //If the user did not make a mistake in entering the postal code, prompt the user to re-enter the city
                    if (postalCode.equals(originalPostalCode)) {
                        System.out.println("Please enter a valid city");
                        city = sc.nextLine();
                        //Update the city
                        info[3] = city;
                    }
                }
            }
            //Catch any Exceptions
            catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        while ((count == 0) || (postalCode.length() < 3));      //Condition to loop again
    	
	reader.close();
	sc.close();
    }

    public static void validateCreditCard() {
    }
    /**
     * Create a .CSV file that contains the customer's entered information          
     * @param info    The array that contains the customer's entered information
     * @param print   The created and initialized PrintWriter
     * @throws FileNotFoundException
     */
    public static void generateCustomerDataFile(String[] info, PrintWriter print) throws FileNotFoundException {
        for (int i = 0; i < info.length; i++) {
            //Enter all of the customer's data, separated by commas due to the style of CSV files
            print.print(info[i] + ",");
        }
        //Note: Adding data for multiple customers does not work yet due to an issue with closing the PrintWriter
    }
    /*******************************************************************
    *       ADDITIONAL METHODS MAY BE ADDED BELOW IF NECESSARY         *
    *******************************************************************/
}
