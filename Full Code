/* Customer System Assignment
 * Date: November 23, 2020
 * Authors: Alex Theaker and Catherine Yu
 * Teacher: Mr. Ho - ICS3U1-02
 * Description: Customer Information System that allows the user to enter customer information 
 * (first name, last name, city, postal code, and credit card number)
 * And the program generates a unique customer ID, validates the city, postal code, and credit card number
 * And generates a .CSV file containing all of the entered and validated information
 */

import java.util.Scanner;
// More packages may be imported in the space below
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

class CustomerSystem {
    public static void main(String[] args) throws IOException {
        // Please do not edit any of these variables
        Scanner reader = new Scanner(System.in);
        String userInput, enterCustomerOption, generateCustomerOption, exitCondition;
        enterCustomerOption = "1";
        generateCustomerOption = "2";
        exitCondition = "9";

        // More variables for the main may be declared in the space below
        // Declare an array with six elements to contain the customer's information
        String[] customerInfo = new String[6];
        // Declare and initialize variables
        String fileName = "customer_information.csv";       // The name of the file containing the customer's information
        int count = 1;
        boolean validatePC, validateCC, validateCCWithLuhn;

        do {
            printMenu();                                    // Printing out the main menu
            userInput = reader.nextLine();                  // User selection from the menu

            if (userInput.equals(enterCustomerOption)) {
                // Only the line below may be edited based on the parameter list and how you design the method return

                // Collect the customer's information and store it in a String array
                customerInfo = enterCustomerInfo(count, customerInfo);

            } else if (userInput.equals(generateCustomerOption)) {
                // Only the line below may be edited based on the parameter list and how you design the method return

                // Validate the entered postal code and corresponding city
                validatePC = validatePostalCode(customerInfo[4], customerInfo[3], customerInfo);
                if (validatePC == true) {
                    System.out.println(customerInfo[4] + " is a valid postal code for " + customerInfo[3]);
                } else {
                    System.out.println(customerInfo[4] + " is not a valid postal code for " + customerInfo[3]);
                }
                // Validate the entered credit card number
                validateCC = validateCreditCard(customerInfo[5]);
                validateCCWithLuhn = LuhnCheck(customerInfo[5]);
                if ((validateCC == true) && (validateCCWithLuhn == true)) {
                    System.out.println(customerInfo[5] + " is a valid credit card number");
                } else {
                    System.out.println(customerInfo[5] + " is not a valid credit card number");
                }

                // Only generate a data file if the postal code, city, and credit card number are valid
                if ((validatePC == true) && (validateCC == true) && (validateCCWithLuhn == true)) {
                    // Generate a data file with the customer's entered information
                    generateCustomerDataFile(customerInfo, fileName);
                    System.out.println("The file has been created.");
                    
                    // Add one to count to update the next customer's ID
                    count++;
                } else {
                    System.out.println("Please enter the customer's information again");
                }

            } else {
                System.out.println("Please type in a valid option (A number from 1-9)");
            }

        } while (!userInput.equals(exitCondition));         // Exits once the user types the exitCondition

        System.out.println("Program Terminated");

        // Close the Scanner
        reader.close();
    }
    /**
     * Print the user interface into the terminal panel
     * @author Mr. Ho
     */
    public static void printMenu() {
        // Print a line for clarity purposes
        System.out.println();
        System.out.println("Customer and Sales System\n"
        .concat("1. Enter Customer Information\n")
        .concat("2. Generate Customer data file\n")
        .concat("3. Report on total Sales (Not done in this part)\n")
        .concat("4. Check for fraud in sales data (Not done in this part)\n")
        .concat("9. Quit\n")
        .concat("Enter menu option (1-9)\n"));
    }
    /**
     * Take the customer's information and store it in a String array
     * @author      Catherine Yu
     * @param count The customer's unique ID value
     * @param info  An empty array to contain the customer's information
     * @return      The populated array that contains the customer's information
     */
    public static String[] enterCustomerInfo(int count, String[] info) {
        // Create a new scanner
        Scanner sc = new Scanner(System.in);

        // Set the customer's ID as the value of count
        info[0] = "" + count;
        // User inputs
        System.out.println("Customer's first name:");
        info[1] = sc.nextLine();
        System.out.println("Customer's last name");
        info[2] = sc.nextLine();
        System.out.println("Customer's city with proper capitalization");
        info[3] = sc.nextLine();
        System.out.println("Customer's postal code with proper capitalization and spacing");
        info[4] = sc.nextLine();
        System.out.println("Customer's credit card number");
        info[5] = sc.nextLine();

        // Return the populated array
        return info;
    }
    /**
     * Compare the customer's entered postal code and city with a document of
     * Canadian postal codes and cities to ensure they are valid
     * @author              Catherine Yu
     * @param postalCode    The customer's entered postal code
     * @param city          The customer's entered city
     * @param info          The array containing the customer's entered information
     * @return              A boolean value of whether the postal code and city are valid or not
     * @throws FileNotFoundException
     */
    public static boolean validatePostalCode(String postalCode, String city, String[] info) throws FileNotFoundException {
        // Create a file and a BufferedReader that uses a FileReader to read the file
        String fileName = "postal_codes.csv";
        File file = new File(fileName);
        BufferedReader reader = new BufferedReader(new FileReader(file));
        // Declare and initialize variables
        boolean validatePC = true;
        String line; 

        // Validate the length of the postal code
        if (postalCode.length() < 3) {
            validatePC = false;
        } else {
            // Create an array that splits the first three digits from the other digits
            String[] firstThree = postalCode.split(" ");

            try {            
                // Loops until there are no more lines to read
                while ((line = reader.readLine()) != null) {
                    // The postal code and city are valid if they appear in the same line
                    if ((line.contains(firstThree[0] + "|")) && (line.contains(city))) {
                        validatePC = true;
                        // Break the loop once the postal code is validated
                        break;
                    } else {
                        // Otherwise they are not valid
                        validatePC = false;
                    }
                }
            // Catch any exceptions
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        // Return whether the postal code and city are valid or not
        return validatePC;
    }
    /**
     * Ensure that the customer's credit card has at least 9 digits
     * @author          Alex Theaker
     * @param ccNumber  The customer's entered credit card number
     * @return          A boolean value of whether the length is valid or not
     */
    public static boolean validateCreditCard(String ccNumber) {
        // Declare and initialize variables
        int length = ccNumber.length();
        // Return a boolean value based on the length of the entered credit card number
        if (length < 9) {
            return false;
        } else {
            return true;
        }
    }
    /**
     * Use the Luhn Algorithm to check whether a credit card number is valid or not
     * @author          Alex Theaker
     * @param ccNumber  The customer's entered credit card number
     * @return          A boolean of whether the credit card number is valid or not
     */
    public static boolean LuhnCheck(String ccNumber) {
        // Declare and initialize variables
        int length = ccNumber.length();
        int sum = 0;
        boolean second = false;

        // For loop that loops backwards through the numbers
        for (int i = length - 1; i >= 0; i--) {
            // Subtract 0 so it converts it to an integer
            int d = ccNumber.charAt(i) - '0';

            // Multiply alternating numbers by 2
            if (second == true)
                d = d * 2;

            // Add two digits to handle cases that make two digits after doubling
            sum += d / 10;
            sum += d % 10;

            // Reverse the second boolean
            second = !second;
        }
        // Returns a boolean value of true or false depending on the value of sum
        return (sum % 10 == 0);
    }
    /**
     * Create a .CSV file that contains the customer's entered information
     * @author          Catherine Yu
     * @param info      The array that contains the customer's entered information
     * @param fileName  The name of the file that will contain all of the customer's information
     * @throws IOException
     */
    public static void generateCustomerDataFile(String[] info, String fileName) throws IOException {
        // Create a file, FileWriter, and PrintWriter
        File file = new File(fileName);
        FileWriter filewriter = new FileWriter(file, true);
        PrintWriter printwriter = new PrintWriter(filewriter);

        // For loop to enter all of the customer's information
        for (int i = 0; i < info.length; i++) {
            // Separate the information with commas due to the style of CSV files
            printwriter.print(info[i] + ",");
        }
        // Print an empty line to allow multiple inputs
        printwriter.println();
        
        // Close the PrintWriter
        printwriter.close();
    }
}
